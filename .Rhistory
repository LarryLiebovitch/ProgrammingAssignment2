demo()
error.catching
help.start()
x <- rnorm(50)
y <- rnorm(x)
plot (x,y)
X <- norm(50)
x <- norm(50)
x <- rnorm(50)
x <- rnorm(50)
y <- rnorm(x)
plot (x,y)
install.packages("KernSmooth")
library(KernSmooth)
x<-1:20
x
x[1]
x[0]
x[20]
x[21]
x
rm
x
rm x
rm(x)
x
x<-list(foo=1:4, bar=0.6)
x
x[1]
x[2]
x<-1;20
x<-1:20
x[10]
x<-matrix(nrow=2,ncol=5)
x
x
x=1:20
x
y=matrix(x,ncol=5,nrow=2)
y
dimnames(y)<-list(c(("a","b"),("c","d"))
dimnames(y)<-list(c("a","b"),("c","d"))
dimnames(y)<-list(c("a","b"),c("c","d"))
x=1:4
x
y=matrix(x,ncol=2,nrow=2)
x
y
dimnames(y)<-list(c("a","b"),c("c","d"))
y
x<-matrix(1:6,2,3)
x
attributes(x)
x<-matrix(1:6,3,2)
x
x<-matrix(1:4,2,2)
x
y<-matrix(rep(10,4),2,2)
y
x<-c("a","b","c","d")
x
for (i in 1:4) print (x[i])
for (i in seq_along(x)) {print (x[i])}
for (letter in x) print (x[i])
for (letter in x) {print (x[i])}
for (letter in x) {print (letter)}
args(mean)
formals(mean)
x<-Sys,time()
x<-Sys.time()
x
x<-Sys.time()
x
source("corr.R")
x=rep(1:4)
x
x=array(rep(1:4),10,20)
x
x=matrix(rep(1:4),10,20)
x
x=list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
x
library(datasets)
data(iris)
iris
head(iris)
x=iris$Sepal.Length
x
mean(iris$Septal.Length)
mean(x)
class(x)
mean(x,na.rm=T)
colMeans(iris)
class(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
data
mtcars
?mtcars
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
q4=with(mtcars, tapply(hp, cyl, mean))
q4
class(q4)
q4[2,1]-q4[2,3]
q4[2,1]-q4[2,3]
dimension(q4)
dim(q4)
q4[1]
q4[1]-q4[3]
debug(ls)
undebug(ls)
ls
class(ls)
iris
x<-[iris$Septal.Length]
iris$Spetal.Length
x2=iris$Septal.Length
x2
x2=mean(iris$Septal.Length)
x2
x3=iris$Septal.Length
x3
x3<-iris$Septal.Length
x3
iris
class(iris)
apply(iris,1:4],2,mean)
apply(iris,[1:4],2,mean)
apply(iris[, 1:4], 2, mean)
q4=with(iris, tapply(Septal.Length, Species, mean))
q4=with(iris, tapply(Sepal.Length, Species, mean))
q4
makeMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) a <<- solve
getsolve <- function() a
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachemean <- function(x, ...) {
a <- x$getsolve()
if(!is.null(a)) {
message("getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setsolve(a)
a
}
x<-matrix(1:4,2,2)
x1<-makeCacheMatrix(x)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) a <<- solve
getsolve <- function() a
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachSolve <- function(x, ...) {
a <- x$getsolve()
if(!is.null(a)) {
message("getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setsolve(a)
a
}
x<-matrix(1:4,2,2)
class(x)
class([1,1])
class(x[1,1])
x<-as.numeric(x)
x
x<-matrix(1:4,2,2)
x
x1<-makeCacheMatrix(x)
cacheSolve(x1)
cacheSolve <- function(x, ...) {
a <- x$getsolve()
if(!is.null(a)) {
message("getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setsolve(a)
a
}
cacheSolve(x1)
traceback()
cacheSolve <- function(x, ...) {
a <- x$getsolve()
if(!is.null(a)) {
message("getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setsolve(a)
a
}
cacheSolve(x1)
cacheSolve <- function(x, ...) {
a <- x$getsolve()
if(!is.null(a)) {
message("getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setsolve(a)
a
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) a <<- solve
getsolve <- function() a
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
x<-matrix(1:4,2,2)
x1<-makeCacheMatrix(x)
x1
cacheSolve(x1)
traceback
x
solve(x)
b<-solve(x)
b
a%*%b
x%*%b
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
a <<- NULL
}
get <- function() x
setsolve <- function(solve) a <<- solve
getsolve <- function() a
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
a <- x$getsolve()
if(!is.null(a)) {
message("getting cached data")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setsolve(a)
a
}
x<-matrix(1:4,2,2)
x1<-makeCacheMatrix(x)
cacheSolve(x1)
setwd("~/ProgrammingAssignment2")
